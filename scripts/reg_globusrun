#!/bin/sh
#----------------------------------------------------------------------
#  A shell script to launch the ReG steering system using COG kit,
#  globus or ssh.
#
#  (C) Copyright 2002, 2004, University of Manchester, United Kingdom,
#  all rights reserved.
#
#  This software is produced by the Supercomputing, Visualization and
#  e-Science Group, Manchester Computing, University of Manchester
#  as part of the RealityGrid project (http://www.realitygrid.org),
#  funded by the EPSRC under grants GR/R67699/01 and GR/R67699/02.
#
#  LICENCE TERMS
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS MATERIAL IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. THE ENTIRE RISK AS TO THE QUALITY
#  AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
#  DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
#  CORRECTION.
#
#  Author(s)......: <R. L. Pinning>
#  Modified:        <27.04.2004>
#
#------------------------------------------------------------------------

echo "Job manager is: "$HOST_JOB_MGR

# Build the RSL file
REG_RSL_FILE=/tmp/sim_stage.$$.rsl
export REG_RSL_FILE

echo "&(executable=\$(GLOBUSRUN_GASS_URL)/$REG_TMP_FILE)(jobtype=single)(maxWallTime=$TIME_TO_RUN)(stdout=$SIM_STD_OUT_FILE)(stderr=$SIM_STD_ERR_FILE)(count=$SIM_PROCESSORS)(environment=(NGSMODULES pbs:pgi:gm:mpich-gm))" > $REG_RSL_FILE

# If target machine is the local client then just execute the launching script
# created in the xxx_launch.sh script that called this one
case $SIM_HOSTNAME in
       localhost)
        chmod a+x $REG_TMP_FILE
	$REG_TMP_FILE &> ${HOME}/${SIM_STD_ERR_FILE} &
	exit
          ;;
esac

# SIM_NODE_HOSTNAME is needed for running on a linux cluster
# viking has a unique script on the machine itself configured to put the job
# into SGE queues
#if [ $SSH -eq 0 ]
#then
#  case $SIM_HOSTNAME in
#       viking-i00.viking.lesc.doc.ic.ac.uk)
#          SIM_NODE_HOSTNAME=viking000.viking.lesc.doc.ic.ac.uk
#          globus-job-run $SIM_HOSTNAME -stdout $SIM_STD_OUT_FILE.initial -stderr $SIM_STD_ERR_FILE.initial -s /tmp/reg_sim_remote.$$ &  

case $ReG_LAUNCH in
    globus)
     echo "Using vanilla globus"
     $GLOBUS_LOCATION/bin/globusrun -b -s -r ${HOST_JOB_MGR} -f $REG_RSL_FILE
    ;;
    cog)
     echo "Using COG globus"
     $COG_INSTALL_PATH/bin/globusrun -s -r ${HOST_JOB_MGR} -f $REG_RSL_FILE &
    ;;
    ssh)
        chmod a+x $REG_TMP_FILE
        scp $REG_TMP_FILE $USER@$HOST:$REG_TMP_FILE
        ssh -f $USER@$HOST $REG_TMP_FILE
    ;;
    *)
     echo "ReG_LAUNCH must be set to one of 'globus', 'cog' or 'ssh'"
    ;;
esac

if [ $? -gt "0" ]
then
  echo "Error with starting simulation"
  exit
fi
