/* checkPointTreeStub.h
   Generated by gSOAP 2.3.8 from RealityGridTree.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#ifndef checkPointTreeStub_H
#define checkPointTreeStub_H
#include "stdsoap2.h"

SOAP_BEGIN_NAMESPACE(checkPointTree)

/* Enumerations */

/* Classes and Structs */

/* fact:requestTerminationBeforeResponse: */
class SOAP_CMAC fact__requestTerminationBeforeResponse
{
public:
	char *_requestTerminationBeforeReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:findServiceDataResponse: */
class SOAP_CMAC fact__findServiceDataResponse
{
public:
	char *_findServiceDataReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:findByHandleResponse: */
class SOAP_CMAC fact__findByHandleResponse
{
public:
	char *_findByHandleReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:getActiveTreesResponse: */
class SOAP_CMAC fact__getActiveTreesResponse
{
public:
	char *_getActiveTreesReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:createNewTreeResponse: */
class SOAP_CMAC fact__createNewTreeResponse
{
public:
	char *_createNewTreeReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:requestTerminationAfterResponse: */
class SOAP_CMAC fact__requestTerminationAfterResponse
{
public:
	char *_requestTerminationAfterReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:destroyResponse: */
class SOAP_CMAC fact__destroyResponse
{
public:
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* fact:createNewTree: */
struct fact__createNewTree
{
	char *in0;
	char *in1;
	char *in2;
	char *in3;
};

/* fact:findByHandle: */
struct fact__findByHandle
{
	char *in0;
	char *in1;
};

/* fact:destroy: */
struct fact__destroy
{
};

/* fact:findServiceData: */
struct fact__findServiceData
{
	char *in0;
};

/* fact:getActiveTrees: */
struct fact__getActiveTrees
{
};

/* fact:requestTerminationBefore: */
struct fact__requestTerminationBefore
{
	char *in0;
};

/* fact:requestTerminationAfter: */
struct fact__requestTerminationAfter
{
	char *in0;
};

/* tree:getParentNodeResponse: */
class SOAP_CMAC tree__getParentNodeResponse
{
public:
	char *_getParentNodeReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:requestTerminationAfterResponse: */
class SOAP_CMAC tree__requestTerminationAfterResponse
{
public:
	char *_requestTerminationAfterReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:addNodeResponse: */
class SOAP_CMAC tree__addNodeResponse
{
public:
	char *_addNodeReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:getCheckPointDataResponse: */
class SOAP_CMAC tree__getCheckPointDataResponse
{
public:
	char *_getCheckPointDataReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:findServiceDataResponse: */
class SOAP_CMAC tree__findServiceDataResponse
{
public:
	char *_findServiceDataReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:setCheckPointDataResponse: */
class SOAP_CMAC tree__setCheckPointDataResponse
{
public:
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:getChildNodesResponse: */
class SOAP_CMAC tree__getChildNodesResponse
{
public:
	char *_getChildNodesReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:requestTerminationBeforeResponse: */
class SOAP_CMAC tree__requestTerminationBeforeResponse
{
public:
	char *_requestTerminationBeforeReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:getSteeringCommandsResponse: */
class SOAP_CMAC tree__getSteeringCommandsResponse
{
public:
	char *_getSteeringCommandsReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:getInputFileResponse: */
class SOAP_CMAC tree__getInputFileResponse
{
public:
	char *_getInputFileReturn;	/* return */
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:destroyResponse: */
class SOAP_CMAC tree__destroyResponse
{
public:
public:
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* tree:requestTerminationAfter: */
struct tree__requestTerminationAfter
{
	char *in0;
};

/* tree:getChildNodes: */
struct tree__getChildNodes
{
};

/* tree:getInputFile: */
struct tree__getInputFile
{
};

/* tree:findServiceData: */
struct tree__findServiceData
{
	char *in0;
};

/* tree:setCheckPointData: */
struct tree__setCheckPointData
{
};

/* tree:destroy: */
struct tree__destroy
{
};

/* tree:getSteeringCommands: */
struct tree__getSteeringCommands
{
};

/* tree:requestTerminationBefore: */
struct tree__requestTerminationBefore
{
	char *in0;
};

/* tree:getCheckPointData: */
struct tree__getCheckPointData
{
};

/* tree:getParentNode: */
struct tree__getParentNode
{
};

/* tree:addNode: */
struct tree__addNode
{
	char *in0;
	char *in1;
	char *in2;
	char *in3;
	char *in4;
};

/* SOAP Header: */
struct SOAP_ENV__Header
{
	void *dummy;	/* transient */
};

/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;
	char *SOAP_ENV__Node;
	char *SOAP_ENV__Role;
};

/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;
	char *faultstring;
	char *faultactor;
	char *detail;
	struct SOAP_ENV__Code *SOAP_ENV__Code;
	char *SOAP_ENV__Reason;
	char *SOAP_ENV__Detail;
};

/* Types With Custom (De)serializers: */

/* Typedefs */
typedef char *xsd__string;
typedef char *_QName;

/* Extern */

/* Remote Methods */

SOAP_FMAC5 int SOAP_FMAC6 fact__createNewTree(struct soap*, char *, char *, char *, char *, fact__createNewTreeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__findByHandle(struct soap*, char *, char *, fact__findByHandleResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__destroy(struct soap*, fact__destroyResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__findServiceData(struct soap*, char *, fact__findServiceDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__getActiveTrees(struct soap*, fact__getActiveTreesResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__requestTerminationBefore(struct soap*, char *, fact__requestTerminationBeforeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 fact__requestTerminationAfter(struct soap*, char *, fact__requestTerminationAfterResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__requestTerminationAfter(struct soap*, char *, tree__requestTerminationAfterResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__getChildNodes(struct soap*, tree__getChildNodesResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__getInputFile(struct soap*, tree__getInputFileResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__findServiceData(struct soap*, char *, tree__findServiceDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__setCheckPointData(struct soap*, tree__setCheckPointDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__destroy(struct soap*, tree__destroyResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__getSteeringCommands(struct soap*, tree__getSteeringCommandsResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__requestTerminationBefore(struct soap*, char *, tree__requestTerminationBeforeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__getCheckPointData(struct soap*, tree__getCheckPointDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__getParentNode(struct soap*, tree__getParentNodeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 tree__addNode(struct soap*, char *, char *, char *, char *, char *, tree__addNodeResponse *);

/* Stubs */

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__createNewTree(struct soap*, const char*, const char*, char *, char *, char *, char *, fact__createNewTreeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__findByHandle(struct soap*, const char*, const char*, char *, char *, fact__findByHandleResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__destroy(struct soap*, const char*, const char*, fact__destroyResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__findServiceData(struct soap*, const char*, const char*, char *, fact__findServiceDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__getActiveTrees(struct soap*, const char*, const char*, fact__getActiveTreesResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__requestTerminationBefore(struct soap*, const char*, const char*, char *, fact__requestTerminationBeforeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__requestTerminationAfter(struct soap*, const char*, const char*, char *, fact__requestTerminationAfterResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__requestTerminationAfter(struct soap*, const char*, const char*, char *, tree__requestTerminationAfterResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getChildNodes(struct soap*, const char*, const char*, tree__getChildNodesResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getInputFile(struct soap*, const char*, const char*, tree__getInputFileResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__findServiceData(struct soap*, const char*, const char*, char *, tree__findServiceDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__setCheckPointData(struct soap*, const char*, const char*, tree__setCheckPointDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__destroy(struct soap*, const char*, const char*, tree__destroyResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getSteeringCommands(struct soap*, const char*, const char*, tree__getSteeringCommandsResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__requestTerminationBefore(struct soap*, const char*, const char*, char *, tree__requestTerminationBeforeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getCheckPointData(struct soap*, const char*, const char*, tree__getCheckPointDataResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getParentNode(struct soap*, const char*, const char*, tree__getParentNodeResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__addNode(struct soap*, const char*, const char*, char *, char *, char *, char *, char *, tree__addNodeResponse *);

/* Skeletons */

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__createNewTree(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__findByHandle(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__destroy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__findServiceData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__getActiveTrees(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__requestTerminationBefore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_fact__requestTerminationAfter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__requestTerminationAfter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__getChildNodes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__getInputFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__findServiceData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__setCheckPointData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__destroy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__getSteeringCommands(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__requestTerminationBefore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__getCheckPointData(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__getParentNode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tree__addNode(struct soap*);

SOAP_END_NAMESPACE(checkPointTree)

#endif

/* end of checkPointTreeStub.h */
