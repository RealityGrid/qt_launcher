/* checkPointTreeClient.cpp
   Generated by gSOAP 2.3.8 from RealityGridTree.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "checkPointTreeH.h"

SOAP_BEGIN_NAMESPACE(checkPointTree)

SOAP_SOURCE_STAMP("@(#) checkPointTreeClient.cpp ver 2.3.8 2003-11-24 15:20:32 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__createNewTree(struct soap *soap, const char *URL, const char *action, char *in0, char *in1, char *in2, char *in3, fact__createNewTreeResponse *out)
{
	struct fact__createNewTree soap_tmp_fact__createNewTree;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_tmp_fact__createNewTree.in0=in0;
	soap_tmp_fact__createNewTree.in1=in1;
	soap_tmp_fact__createNewTree.in2=in2;
	soap_tmp_fact__createNewTree.in3=in3;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__createNewTree(soap, &soap_tmp_fact__createNewTree);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__createNewTree(soap, &soap_tmp_fact__createNewTree, "fact:createNewTree", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__createNewTree(soap, &soap_tmp_fact__createNewTree, "fact:createNewTree", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:createNewTreeResponse", "fact:createNewTreeResponse");
	else
		soap_get_fact__createNewTreeResponse(soap, out, "fact:createNewTreeResponse", "fact:createNewTreeResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__findByHandle(struct soap *soap, const char *URL, const char *action, char *in0, char *in1, fact__findByHandleResponse *out)
{
	struct fact__findByHandle soap_tmp_fact__findByHandle;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_tmp_fact__findByHandle.in0=in0;
	soap_tmp_fact__findByHandle.in1=in1;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__findByHandle(soap, &soap_tmp_fact__findByHandle);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__findByHandle(soap, &soap_tmp_fact__findByHandle, "fact:findByHandle", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__findByHandle(soap, &soap_tmp_fact__findByHandle, "fact:findByHandle", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:findByHandleResponse", "fact:findByHandleResponse");
	else
		soap_get_fact__findByHandleResponse(soap, out, "fact:findByHandleResponse", "fact:findByHandleResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__destroy(struct soap *soap, const char *URL, const char *action, fact__destroyResponse *out)
{
	struct fact__destroy soap_tmp_fact__destroy;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__destroy(soap, &soap_tmp_fact__destroy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__destroy(soap, &soap_tmp_fact__destroy, "fact:destroy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__destroy(soap, &soap_tmp_fact__destroy, "fact:destroy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:destroyResponse", "fact:destroyResponse");
	else
		soap_get_fact__destroyResponse(soap, out, "fact:destroyResponse", "fact:destroyResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__findServiceData(struct soap *soap, const char *URL, const char *action, char *in0, fact__findServiceDataResponse *out)
{
	struct fact__findServiceData soap_tmp_fact__findServiceData;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_tmp_fact__findServiceData.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__findServiceData(soap, &soap_tmp_fact__findServiceData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__findServiceData(soap, &soap_tmp_fact__findServiceData, "fact:findServiceData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__findServiceData(soap, &soap_tmp_fact__findServiceData, "fact:findServiceData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:findServiceDataResponse", "fact:findServiceDataResponse");
	else
		soap_get_fact__findServiceDataResponse(soap, out, "fact:findServiceDataResponse", "fact:findServiceDataResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__getActiveTrees(struct soap *soap, const char *URL, const char *action, fact__getActiveTreesResponse *out)
{
	struct fact__getActiveTrees soap_tmp_fact__getActiveTrees;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__getActiveTrees(soap, &soap_tmp_fact__getActiveTrees);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__getActiveTrees(soap, &soap_tmp_fact__getActiveTrees, "fact:getActiveTrees", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__getActiveTrees(soap, &soap_tmp_fact__getActiveTrees, "fact:getActiveTrees", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:getActiveTreesResponse", "fact:getActiveTreesResponse");
	else
		soap_get_fact__getActiveTreesResponse(soap, out, "fact:getActiveTreesResponse", "fact:getActiveTreesResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__requestTerminationBefore(struct soap *soap, const char *URL, const char *action, char *in0, fact__requestTerminationBeforeResponse *out)
{
	struct fact__requestTerminationBefore soap_tmp_fact__requestTerminationBefore;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_tmp_fact__requestTerminationBefore.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__requestTerminationBefore(soap, &soap_tmp_fact__requestTerminationBefore);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__requestTerminationBefore(soap, &soap_tmp_fact__requestTerminationBefore, "fact:requestTerminationBefore", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__requestTerminationBefore(soap, &soap_tmp_fact__requestTerminationBefore, "fact:requestTerminationBefore", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:requestTerminationBeforeResponse", "fact:requestTerminationBeforeResponse");
	else
		soap_get_fact__requestTerminationBeforeResponse(soap, out, "fact:requestTerminationBeforeResponse", "fact:requestTerminationBeforeResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_fact__requestTerminationAfter(struct soap *soap, const char *URL, const char *action, char *in0, fact__requestTerminationAfterResponse *out)
{
	struct fact__requestTerminationAfter soap_tmp_fact__requestTerminationAfter;
	if (!URL)
		URL = "http://vermont.mvc.mcc.ac.uk:50000/Session/RealityGridTree/factory";
	if (!action)
		action = "";
	soap_tmp_fact__requestTerminationAfter.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_fact__requestTerminationAfter(soap, &soap_tmp_fact__requestTerminationAfter);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_fact__requestTerminationAfter(soap, &soap_tmp_fact__requestTerminationAfter, "fact:requestTerminationAfter", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_fact__requestTerminationAfter(soap, &soap_tmp_fact__requestTerminationAfter, "fact:requestTerminationAfter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "fact:requestTerminationAfterResponse", "fact:requestTerminationAfterResponse");
	else
		soap_get_fact__requestTerminationAfterResponse(soap, out, "fact:requestTerminationAfterResponse", "fact:requestTerminationAfterResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__requestTerminationAfter(struct soap *soap, const char *URL, const char *action, char *in0, tree__requestTerminationAfterResponse *out)
{
	struct tree__requestTerminationAfter soap_tmp_tree__requestTerminationAfter;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_tmp_tree__requestTerminationAfter.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__requestTerminationAfter(soap, &soap_tmp_tree__requestTerminationAfter);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__requestTerminationAfter(soap, &soap_tmp_tree__requestTerminationAfter, "tree:requestTerminationAfter", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__requestTerminationAfter(soap, &soap_tmp_tree__requestTerminationAfter, "tree:requestTerminationAfter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:requestTerminationAfterResponse", "tree:requestTerminationAfterResponse");
	else
		soap_get_tree__requestTerminationAfterResponse(soap, out, "tree:requestTerminationAfterResponse", "tree:requestTerminationAfterResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getChildNodes(struct soap *soap, const char *URL, const char *action, tree__getChildNodesResponse *out)
{
	struct tree__getChildNodes soap_tmp_tree__getChildNodes;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__getChildNodes(soap, &soap_tmp_tree__getChildNodes);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__getChildNodes(soap, &soap_tmp_tree__getChildNodes, "tree:getChildNodes", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__getChildNodes(soap, &soap_tmp_tree__getChildNodes, "tree:getChildNodes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:getChildNodesResponse", "tree:getChildNodesResponse");
	else
		soap_get_tree__getChildNodesResponse(soap, out, "tree:getChildNodesResponse", "tree:getChildNodesResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getInputFile(struct soap *soap, const char *URL, const char *action, tree__getInputFileResponse *out)
{
	struct tree__getInputFile soap_tmp_tree__getInputFile;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__getInputFile(soap, &soap_tmp_tree__getInputFile);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__getInputFile(soap, &soap_tmp_tree__getInputFile, "tree:getInputFile", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__getInputFile(soap, &soap_tmp_tree__getInputFile, "tree:getInputFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:getInputFileResponse", "tree:getInputFileResponse");
	else
		soap_get_tree__getInputFileResponse(soap, out, "tree:getInputFileResponse", "tree:getInputFileResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__findServiceData(struct soap *soap, const char *URL, const char *action, char *in0, tree__findServiceDataResponse *out)
{
	struct tree__findServiceData soap_tmp_tree__findServiceData;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_tmp_tree__findServiceData.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__findServiceData(soap, &soap_tmp_tree__findServiceData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__findServiceData(soap, &soap_tmp_tree__findServiceData, "tree:findServiceData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__findServiceData(soap, &soap_tmp_tree__findServiceData, "tree:findServiceData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:findServiceDataResponse", "tree:findServiceDataResponse");
	else
		soap_get_tree__findServiceDataResponse(soap, out, "tree:findServiceDataResponse", "tree:findServiceDataResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__setCheckPointData(struct soap *soap, const char *URL, const char *action, tree__setCheckPointDataResponse *out)
{
	struct tree__setCheckPointData soap_tmp_tree__setCheckPointData;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__setCheckPointData(soap, &soap_tmp_tree__setCheckPointData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__setCheckPointData(soap, &soap_tmp_tree__setCheckPointData, "tree:setCheckPointData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__setCheckPointData(soap, &soap_tmp_tree__setCheckPointData, "tree:setCheckPointData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:setCheckPointDataResponse", "tree:setCheckPointDataResponse");
	else
		soap_get_tree__setCheckPointDataResponse(soap, out, "tree:setCheckPointDataResponse", "tree:setCheckPointDataResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__destroy(struct soap *soap, const char *URL, const char *action, tree__destroyResponse *out)
{
	struct tree__destroy soap_tmp_tree__destroy;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__destroy(soap, &soap_tmp_tree__destroy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__destroy(soap, &soap_tmp_tree__destroy, "tree:destroy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__destroy(soap, &soap_tmp_tree__destroy, "tree:destroy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:destroyResponse", "tree:destroyResponse");
	else
		soap_get_tree__destroyResponse(soap, out, "tree:destroyResponse", "tree:destroyResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getSteeringCommands(struct soap *soap, const char *URL, const char *action, tree__getSteeringCommandsResponse *out)
{
	struct tree__getSteeringCommands soap_tmp_tree__getSteeringCommands;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__getSteeringCommands(soap, &soap_tmp_tree__getSteeringCommands);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__getSteeringCommands(soap, &soap_tmp_tree__getSteeringCommands, "tree:getSteeringCommands", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__getSteeringCommands(soap, &soap_tmp_tree__getSteeringCommands, "tree:getSteeringCommands", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:getSteeringCommandsResponse", "tree:getSteeringCommandsResponse");
	else
		soap_get_tree__getSteeringCommandsResponse(soap, out, "tree:getSteeringCommandsResponse", "tree:getSteeringCommandsResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__requestTerminationBefore(struct soap *soap, const char *URL, const char *action, char *in0, tree__requestTerminationBeforeResponse *out)
{
	struct tree__requestTerminationBefore soap_tmp_tree__requestTerminationBefore;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_tmp_tree__requestTerminationBefore.in0=in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__requestTerminationBefore(soap, &soap_tmp_tree__requestTerminationBefore);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__requestTerminationBefore(soap, &soap_tmp_tree__requestTerminationBefore, "tree:requestTerminationBefore", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__requestTerminationBefore(soap, &soap_tmp_tree__requestTerminationBefore, "tree:requestTerminationBefore", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:requestTerminationBeforeResponse", "tree:requestTerminationBeforeResponse");
	else
		soap_get_tree__requestTerminationBeforeResponse(soap, out, "tree:requestTerminationBeforeResponse", "tree:requestTerminationBeforeResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getCheckPointData(struct soap *soap, const char *URL, const char *action, tree__getCheckPointDataResponse *out)
{
	struct tree__getCheckPointData soap_tmp_tree__getCheckPointData;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__getCheckPointData(soap, &soap_tmp_tree__getCheckPointData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__getCheckPointData(soap, &soap_tmp_tree__getCheckPointData, "tree:getCheckPointData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__getCheckPointData(soap, &soap_tmp_tree__getCheckPointData, "tree:getCheckPointData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:getCheckPointDataResponse", "tree:getCheckPointDataResponse");
	else
		soap_get_tree__getCheckPointDataResponse(soap, out, "tree:getCheckPointDataResponse", "tree:getCheckPointDataResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__getParentNode(struct soap *soap, const char *URL, const char *action, tree__getParentNodeResponse *out)
{
	struct tree__getParentNode soap_tmp_tree__getParentNode;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__getParentNode(soap, &soap_tmp_tree__getParentNode);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__getParentNode(soap, &soap_tmp_tree__getParentNode, "tree:getParentNode", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__getParentNode(soap, &soap_tmp_tree__getParentNode, "tree:getParentNode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:getParentNodeResponse", "tree:getParentNodeResponse");
	else
		soap_get_tree__getParentNodeResponse(soap, out, "tree:getParentNodeResponse", "tree:getParentNodeResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tree__addNode(struct soap *soap, const char *URL, const char *action, char *in0, char *in1, char *in2, char *in3, char *in4, tree__addNodeResponse *out)
{
	struct tree__addNode soap_tmp_tree__addNode;
	if (!URL)
		URL = "http://foo.bar";
	if (!action)
		action = "";
	soap_tmp_tree__addNode.in0=in0;
	soap_tmp_tree__addNode.in1=in1;
	soap_tmp_tree__addNode.in2=in2;
	soap_tmp_tree__addNode.in3=in3;
	soap_tmp_tree__addNode.in4=in4;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tree__addNode(soap, &soap_tmp_tree__addNode);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tree__addNode(soap, &soap_tmp_tree__addNode, "tree:addNode", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tree__addNode(soap, &soap_tmp_tree__addNode, "tree:addNode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (out)
		out->soap_get(soap, "tree:addNodeResponse", "tree:addNodeResponse");
	else
		soap_get_tree__addNodeResponse(soap, out, "tree:addNodeResponse", "tree:addNodeResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_END_NAMESPACE(checkPointTree)

/* end of checkPointTreeClient.cpp */
